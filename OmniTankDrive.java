package org.usfirst.frc.team3495.robot;
//IMPORTING PACKAGES NECESSARY FOR USE
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;

public class OmniTankDrive {//BEGIN OBJECT CLASS OMNI TANK DRIVE

	private int leftSideTalonPort1;//PLACEHOLDER INT FOR LEFT SIDE TALON 1 PORT
	private int leftSideTalonPort2;//PLACEHOLDER INT FOR LEFT SIDE TALON 2 PORT
	private int rightSideTalonPort1;//PLACEHOLDER INT FOR RIGHT SIDE TALON 1 PORT
	private int rightSideTalonPort2;//PLACEHOLDER INT FOR RIGHT SIDE TALON 2 PORT
	private int middleSideTalonPort;//PLACEHOLDER INT FOR MIDDLE WHEEL TALON PORT
	private double strafeAccelerationModifier = 0;//DOUBLE FOR STRAFE ACCELERATION MODIFIER USED IN STRAFE ACCELERATION METHODS
	private double strafeSpeed = 1;//DOUBLE FOR HOLDING THE STRAFE SPEED
	
	private double speedMod = 1;//DOUBLE FOR HOLDING THE STANDARD SPEEDMOD
	
	public OmniTankDrive()
	{
		
	}//END AUTON CONSTRUCTOR
	
	public OmniTankDrive(int pwmT1, int pwmT2, int pwmT3, int pwmT4, int pwmT5)//CONSTRUCTION METHOD, TAKING 3 INT INPUTS TO REPRESENT THE PORTS FOR THE TALONS 
	{
		leftSideTalonPort1 = pwmT1;//SETTING LEFT SIDE TALON 1 PORT PLACEHOLDER TO USER INPUT AT PARAMETER 1
		leftSideTalonPort2 = pwmT2;//SETTING LEFT SIDE TALON 2 PORT PLACEHOLDER TO USER IMPUT AT PARAMETER 2
		rightSideTalonPort1 = pwmT3;//SETTING RIGHT SIDE TALON 1 PORT PLACEHOLDER TO USER INPUT AT PARAMETER 3
		rightSideTalonPort2 = pwmT4;//SETTING RIGHT SIDE TALON 2 PORT PLACEHOLDER TO USER INPUT AT PARAMTER 4
		middleSideTalonPort = pwmT5;//SETTING MIDDLE WHELL PLACEHOLDER TO USER INPUT AT PARAMTER 3
	}//END OBJECT TANKOMNIDRIVE
	
	public Talon l1 = new Talon(leftSideTalonPort1);//DECLARING LEFT SIDE TALON 1 USING USER INPUT FOR THE PORT
	public Talon l2 = new Talon(leftSideTalonPort2);//DECLARING LEFT SIDE TALON 2 USING USER INPUT FOR THE PORT
	public Talon r3 = new Talon(rightSideTalonPort1);//DECLARING RIGHT SIDE TALON 1 USING USER INPUT FOR THE PORT
	public Talon r4 = new Talon(rightSideTalonPort2);//DECLARING RIGHT SIDE TALON 2 USING USER INPUT FOR THE PORT
	public Talon m1 = new Talon(middleSideTalonPort);//DECLARING THE MIDDLE WHEEL TALON USING USER INPUT FOR THE PORT
	
	public void driveLeftSide(double LSP)//METHOD FOR SETTING THE LEFT SIDE OF THE DRIVETRAIN TO THE USER INPUT
	{
		l1.set(LSP);//USING THE USER INPUT TO SET THE MOTORS SPEED
		l2.set(LSP);
	}//END METHOD DRIVE LEFT SIDE
	
	public void driveRightSide(double RSP)//METHOD FOR SETTING THE RIGHT SIDE OF THE DRIVETRAIN TO THE USER INPUT
	{
		r3.set(RSP);//USING THE USER INPUT TO SET THE MOTORS SPEED
		r4.set(RSP);
	}//END METHOD DRIVE RIGHT SIDE

	public void driveMiddle(double MSP)//METHOD FOR SETTING THE RIGHT SIDE OF THE DRIVETRAIN TO THE USERS INPUT
	{
		m1.set(MSP);//USING THE USER INPUT TO SET THE MOTORS SPEED
	}//END METHOD DRIVE MIDDLE
	
	public void singleControllerAxisDrive(double DSP, double subtractionModifier, double MSP)//DRIVE METHOD USING ONE CONTROLLER TO CONTROL STANDARD TANK DRIVE
	//WHILE USING THE OTHER CONTROLLER TO CONTROL THE STRAFFING SPEED
	{
		if(DSP > 0)//IF THE DRIVING SPEED, USUALLY VALUE OF Y AXIS, IS POSITIVE
		{
			if(subtractionModifier > 0)//AND IF THE SUBTRACTION MODIFIER, USUALLY X AXIS OF SAME CONTROLLER, IS POSITIVE  PULLED TO THE RIGHT
			{
				l1.set(-DSP);//SET THE LEFT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS
				l2.set(-DSP);
				r3.set(DSP - subtractionModifier);//SET THE RIGHT SIDE OF THE DRIVETRAIN THE THE VALUE OF THE Y AXIS MINUS THE VALUE OF THE X AXIS
				r4.set(DSP - subtractionModifier);
			}
			else if(subtractionModifier < 0)//OR IF THE SUBTRACTIONMODIFIER, USUALLY THE X AXIS OF THE SAME CONTROLLER, IS NEGATIVE
			{
				l1.set(-DSP - subtractionModifier);//SET THE LEFT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS MINUS THE VALUE OF THE X AXIS
				l2.set(-DSP - subtractionModifier);
				r3.set(DSP);//SET THE RIGHT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS
				r4.set(DSP);
			}//END DIRECTION MODIFYING IF ELSE
		}
		else if(DSP < 0)//OR IF THE DRIVING SPEED, USUALLY THE VALUE OF THE Y AXIS,  IS NEGATIVE,  DRIVING REVERSE
		{
			if(subtractionModifier < 0)//AND IF THE SUBTRACTIONMODIFIER, USUALLY THE X AXIS OF THE SAME CONTROLLER, IS NEGATIVE
			{
				l1.set(-DSP + subtractionModifier);//SET THE LEFT SIDE OF THE DRIVETRAIN THE THE VALUE OF THE Y AXIS PLUS THE VALUE OF THE X AXIS
				l2.set(-DSP + subtractionModifier);
				r3.set(DSP);//SET THE RIGHT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS
				r4.set(DSP);
			}
			else if(subtractionModifier > 0)//OR IF THE SUBTRACTIONMODIFIER, USUALLY THE X AXIS OF THE SAME CONTROLLER, IS POSITIVE
			{
				l1.set(-DSP);//SET THE LEFT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS
				l2.set(-DSP);
				r3.set(DSP + subtractionModifier);//SET THE RIGHT SIDE OF THE DRIVETRAIN TO THE VALUE OF THE Y AXIS PLUS THE VALUE OF THE X AXIS
				r4.set(DSP + subtractionModifier);
			}//END DIRECTION MODIFYING IF ELSE
		}
		else//WHEN THE VALUE OF THE Y AXIS IS 0
		{
			l1.set(0);//SET BOTH THE LEFT AND RIGHT SIDE OF THE DRIVETRAIN TO 0 SPEED
			l2.set(0);
			r3.set(0);
			r4.set(0);
		}//END IF DIRECTION DETECTOR AND MODIFIER
		
	}//END SINGLE CONTROLLER AXIS DRIVE  WHICH USES ONE CONTROLLER FOR DRIVING THE ROBOT NORMALLY, AND USES THE OTHER CONTROLLER FOR STRAFING
	
	public void standardDrive(double LSP, double RSP, boolean sL, boolean sR)//DRIVE METHOD STANDARD TANK DRIVE 
	//USING TWO BUTTONS TO CONTROL STRAFING
	//PARAMTER VALUES   (lStick.getY(), rStick.getY, buttonToStrafeLeft.get(), buttonToStrafeRight.get())
	{
		l1.set(-LSP);//SET THE LEFT SIDE OF THE DRIVETRAIN TO PARAMETER 1, THE Y AXIS VALUE OF THE LEFT JOYSTICK
		l2.set(-LSP);
		r3.set(RSP);//SET THE RIGHT SIDE OF THE DRIVETRAIN TO PARAMETER 2, THE Y AXIS VALUE OF THE RIGHT JOYSTICK
		r4.set(RSP);
		if(sL && !sR)//IF THE STRAFE LEFT BUTTON IS PRESSED AND THE STRAFE RIGHT BUTTON IS NOT PRESSED
		{
			m1.set(strafeSpeed);//SET THE STRAFE TALON TO DOUBLE VARIABLE STRAFESPEED  DECLARED EARLIER IN THE CLASS
		}
		else if(sR && !sL)//IF STRAFE RIGHT BUTTON IS PRESSED AND THE STRAFE LEFT BUTTON IS NOT PRESSED
		{
			m1.set(-strafeSpeed);//SET THE STRAFE TALON TO THE OPPOSITE OF THE VALUE OF STRAFESPEED
		}
		else//WHEN NEITHER BUTTON IS BEING PRESSED
		{
			m1.set(0);//SET THE STRAFE TALON TO 0
		}//END STRAFING WHEEL SETTING
	}//END METHOD STANDARD DRIVE, DRIVING WITHOUT ANY ACCELERATION, BUT RAW VALUES SPEED MOD FOR STRAFE CIM
	
	public void axisDrive(double LSP, double RSP, double MSP)//DRIVE METHOD STANDARD TANK DRIVE
	//USING THE X AXIS OF ONE OF THE CONTROLLERS TO CONTROL THE STRAFE SPEED, NOT USING THE STRAFE SPEED VARIABLE
	//PARAMETERS OF METHOD  (lStick.getY(), rStick.getY(), EITHER lStick.getX() OR rStick.getX())
	{
		l1.set(-LSP);//SET THE LEFT SIDE OF THE DRIVETRAIN TO THE Y AXIS OF THE LEFT JOYSTICK
		l2.set(-LSP);
		r3.set(RSP);//SET THE RIGHT SIDE OF THE DRIVETRAIN TOE THE Y AXIS OF THE RIGHT JOYSTICK
		r4.set(RSP);
		if(MSP> .1 || MSP < -.1){m1.set(MSP);}else{m1.set(0);}//CHECKS FOR X AXIS VALUE PAST 10% DISTANCE TOLERANCE RANGE
		//AND IF PAST TOLERANCE RANGE SET THE STRAFE TALON TO VALUE OF THAT JOYSTICKS X AXIS
	}//END METHOD AXIS DRIVE, USING THE RAW VALUE OF THE CONTROLLER AXIS FOR ALL MOTORS 

	public void standardTankAccelerationStrafeDrive(double LSP , double RSP , boolean sL, boolean sR )//DRIVE METHOD STANDARD TANK DRIVE WITH SPEEDMOD
	//USING BUTTONS TO CONTROL WHICH WAY THE STRAFE TALON ACCELERATES
	//METHOD PARAMETERS  (lStick.getY(), rStick.getY(), buttonToStrafeLeft.get(), buttonToStrafeRight.get()) 
	{
		l1.set(-LSP * speedMod);//SET LEFT SIDE OF DRIVETRAIN TO VALUE OF LEFT JOYSTICK Y AXIS MULTIPLIED BY THE SPEEDMOD
		l2.set(-LSP * speedMod);
		r3.set(RSP * speedMod);//SET RIGHT SIDE OF DRIVETRAIN TO VALUE OF RIGHT JOYSTICK Y AXIS MULTIPLIED BY THE SPEEDMOD
		r4.set(RSP * speedMod);
		m1.set(strafeAccelerationModifier);//SET STRAFE TALON TO THE VALUE OF THE STRAFE ACCELERATION MODIFIER VARIABLE
		if(sL && !sR && strafeAccelerationModifier > -speedMod)//IF THE STRAFE LEFT BUTTON IS PRESSED AND THE STRAFE RIGHT BUTTON IS NOT BEING PRESSED 
		//AND THE STRAFE ACCELERATION MODIFIER IS GREATER THAN THE NEGATIVE VALUE OF THE SPEEDMOD	
		{
			decreaseStrafeAccelerationModifier();//DECREASE THE STARAFE ACCELERATION MODIFIER BY 1%
			Timer.delay(.2);//DELAY THREAD FOR .2 SECONDS
		}
		else if(sR && !sL && strafeAccelerationModifier < speedMod)//IF THE STRAFE RIGHT BUTTON IS BEING PRESSED AND THE STRAFE LEFT BUTTON IS NOT BEING PRESSED
			//AND THE STRAFE ACCELERATION MODIFIER IS LESS THAN THE SPEEDMOD
		{
			increaseStrafeAccelerationModifier();//INCREASE THE STRAFE ACCELERATION MODIFIER BY 1%
			Timer.delay(.2);//DELAY THREAD FOR .2 SECONDS
		}
		else//IF NEITHER BUTTON IS PRESSED
		{
			if(strafeAccelerationModifier > 0 )//IF THE STRAFE ACCELERATION MODIFIER IS HIGHER THAN 0
			{
				decreaseStrafeAccelerationModifier();//DECREASE THE STRAFE ACCELERATION MODIFIER BY 1%
				Timer.delay(.1);//DELAY THE THREAD FOR .1 SECONDS
			}
			else if(strafeAccelerationModifier < 0 )//IF THE STRAFE ACCELERATION MODIFIER IS LOWER THAN 0
			{
				increaseStrafeAccelerationModifier();//INCREASE THE STRAFE ACCELERATION MODIFIER BY 1%
				Timer.delay(.1);//DELAY THREAD FOR .1 SECONDS
			}//END THRESHOLD IF
		}
	}//END METHOD STANDARD TANK DRIVE WITH ACCELERATION FOR THE STRAFING WHEEL
	
	public void rawAxisDrive(double LSP, double RSP, double MSP)//DRIVE METHOD  STANDARD TANK DRIVE WITHOUT SPEEDMOD
	//AND STRAFING WITH X AXIS VALUE WITHOUT A THRESHOLD 
	//METHOD PARAMETERS  (lStick.getY(), rStick.getY(), either rStick.getX() or lStick.getX())
	{
		l1.set(-LSP);//SET THE LEFT SIDE DRIVETRAIN TO THE VALUE OF THE LEFT JOYSTICK Y AXIS
		l2.set(-LSP);
		r3.set(RSP);//SET THE RIGHT SIDE DRIVETRAIN TO THE VALUE OF THE RIGHT JOYSTICK Y AXIS
		r4.set(RSP);
		m1.set(MSP);// SET THE STRAFE TALON TO THE VALUE OF THE X AXIS OF WHICHEVER CONTROLLER YOU PUT IN THE PARAMTERS
	}//END RAW AXIS DRIVE METHOD  WHICH TAKES THE RAW VALUES OF THE CONTROLERS FOR VALUES FOR DRIVING
	
	public void increaseStrafeAccelerationModifier()//MANIPULATION METHOD  INCREASES THE STRAFE ACCELERATION MODIFIER BY .01
	{
		if(strafeAccelerationModifier < 1){strafeAccelerationModifier += .01;}//CHECKS IF THE STRAFE ACCELERATION MODIFIER IS LESS THAN THE HIGHEST POSSIBLE VALUE
	}//END METHOD INCREASING THE STRAFING ACCELERATION MODIFIER
	
	public void decreaseStrafeAccelerationModifier()//MANIPLUATION METHOD  DECREASES THE STRAFE ACCELERATION MODIFIER BY .01
	{
		if(strafeAccelerationModifier > -1){strafeAccelerationModifier -= .01;}//CHECKS IF THE STRAFE ACCELERATION MODIFIER IS GREATER THAN -1
	}//END METHOD DECREASING THE STRAFING ACCELERATION MODIFIER
	
	public void resetStrafeAccelerationModifier()//MANIPULATION METHOD  RESETS THE STRAFE ACCELERATION SPEED TO 0
	{
		strafeAccelerationModifier = 0;//SETS THE STRAFE ACCELERATION MODIFIER VARIABLE TO 0
	}//END METHOD RESETING THE STRAFING ACCELERATION MODIFIER
	
	public void setStrafeSpeed(double x)//MANIPULATION METHOD  SETS THE STRAFE SPEED VARIABLE TO USER INPUT   USED IN METHODS WITH NON IMMEDIATE DYNAMIC SPEED
	{
		strafeSpeed = x;//SET STRAFE SPEED TO PARAMTER X
	}//END METHOD SETTING STRAFING SPEED
	
	public void pointSevenFiveSpeed()//MANIPULATION METHOD  CHANGES THE SPEEDMOD TO .75
	{
		speedMod = .75;//SET VARIABLE SPEEDMOD TO .75
	}//END THREE FOURTHS SPEED	
	
	public void halfSpeed()//MANIPULATION METHOD  CHANGES THE SPEEDMOD TO .5
	{
		speedMod = .5;//SET VARIABLE SPEEDMOD TO .5
	}//END HALF SPEED
	
	public void quarterSpeed()//MANIPULATION METHOD  CHANGES SPEEDMOD TO .25
	{
		speedMod = .25;//SET VARIABLE SPEEDMOD TO .25
	}//END QUARTER SPEED
	
	public void fullSpeed()//MANIPULATION METHOD  CHANGES SPEEDMOD TO 1
	{
		speedMod = 1;//SETS SPEEDMOD TO 1
	}//END FULL SPEED
	
}