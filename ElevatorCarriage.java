package org.usfirst.frc.team3495.robot;
//IMPORT OBJECTS AND CLASSES NEEDED
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Timer;

public class ElevatorCarriage {//OBJECT CLASS CONTAINING METHODS NEEDED FOR CARRAIGE OPERATION
	//DS = DOUBLESOLENOID
	//EACH OF THESE DOUBLESOLENOIDS OPERATES 2 PISTONS ON THE ROBOT
	private int ds1port1;//INT PORT PLACEHOLDER 1 FOR DS 1
	private int ds1port2;//INT PORT PLACEHOLDER 2 FOR DS 1
	private int ds2port1;//INT PORT PLACEHOLDER 1 FOR DS 2
	private int ds2port2;//INT PORT PLACEHOLDER 2 FOR DS 2
	private int ds3port1;//INT PORT PLACEHOLDER 1 FOR DS 3
	private int ds3port2;//INT PORT PLACEHOLDER 2 FOR DS 3
	
	public ElevatorCarriage(int DSP1, int DSP2, int DSP3, int DSP4, int DSP5, int DSP6)//CONSTRUCTOR METHOD SETS PORT PLACEHOLDER VARIABLES TO USER INPUT
	//METHOD PARAMETERS  (DS 1 PORT 1, DS 1 PORT 2, DS 2 PORT 1,DS 2 PORT 2, DS 3 PORT 1, DS 3 PORT 2)
	{
		ds1port1 = DSP1;//USES PARAMETER 1 TO SET TO DS1 PORT PLACEHOLDER 1
		ds1port2 = DSP2;//USES PARAMETER 2 TO SET TO DS1 PORT PLACEHOLDER 2
		ds2port1 = DSP3;//USES PARAMETER 3 TO SET TO DS2 PORT PLACEHOLDER 1
		ds2port2 = DSP4;//USES PARAMETER 4 TO SET TO DS2 PORT PLACEHOLDER 2
		ds3port1 = DSP5;//USES PARAMETER 5 TO SET TO DS3 PORT PLACEHOLDER 1
		ds3port2 = DSP6;//USES PARAMETER 6 TO SET TO DS3 PORT PLACEHOLDER 2
	}//END OBJECT 
	
	private DoubleSolenoid liftPistons = new DoubleSolenoid(ds1port1, ds1port2);//
	private DoubleSolenoid totePossesionPistons = new DoubleSolenoid(ds2port1, ds2port2);
	private DoubleSolenoid canPossesionPistons = new DoubleSolenoid(ds3port1, ds3port2);
	
	public void raiseCarriage()//ACTION METHOD  WILL RAISE THE CARRIAGE WITH OR WITHOUT A CAN OR TOTE
	{
		liftPistons.set(DoubleSolenoid.Value.kForward);//SETS THE PISTON TO EXTEND
	}//END RAISE CARRIAGE METHOD  WHICH RAISES THE CARRIAGE WHEN CALLED'
	
	public void lowerCarriage()//ACTION METHOD  WILL LOWER THE CARRAIGE WITH OR WITHOUT A CAN OR TOTE
	{
		liftPistons.set(DoubleSolenoid.Value.kReverse);//SETS THE PISTON TO RETRACT
	}//END METHOD FOR LOWERING THE CARRAIGE
	
	public void getTote()//ACTION METHOD  WILL GAIN POSSESION OF THE TOTE
	{
		totePossesionPistons.set(DoubleSolenoid.Value.kForward);//SETS THE PISTONS TO EXTEND WHICH PUSHES THE ARMS TO GAIN POSSESION
	}//END METHOD GET TOTE  ACTIVATING THE PISTONS TO GAIN POSSESION OF THE TOTE
		
	public void getCan()//ACTION METHOD  WILL GAIN POSSESION OF THE CAN
	{
		canPossesionPistons.set(DoubleSolenoid.Value.kForward);//SETS THE PISTONS TO EXTEND, WHICH WILL GRAB THE CAN
	}//END METHOD GET CAN   WHICH ACTIVATES THE PISTONS TO GAIN POSSESION OF THE CAN
	
	public void releaseTote()//ACTION METHOD  RELEASES POSSESION OF THE TOTE
	{
		totePossesionPistons.set(DoubleSolenoid.Value.kReverse);//SETS THE PISTONS TO RETRACT, DROPPING THE ARMS AND POSSESION OF THE TOTE
	}//END METHOD FOR RELEASING THE TOTE
	
	public void releaseCan()//ACTION METHOD  RELEASES POSSESION OF THE CAN
	{
		canPossesionPistons.set(DoubleSolenoid.Value.kReverse);//SETS THE PISTONS TO RETRACT, OPENING THE ARMS AND LOSING POSSESION OF THE CAN
	}//END METHOD FOR RELEASING THE CAN
	
	public void actuateTotePickup()//ACTION METHOD   ACTUATES OBTAINING A PISTON AND PREPING FOR GETTING THE NEXT
	{
		releaseTote();//RELEASES TOTE
		lowerCarriage();//LOWERS CARRIAGE
		Timer.delay(.75);//WAITS .75 SECONDS
		getTote();//GETS NEXT TOTE
		Timer.delay(.10);//WAITS .1 SECONDS
		raiseCarriage();//RAISES CARRIAGE
	}//END METHOD FOR PICKING UP A NEW TOTE
	
	public void actuateCanPickup()//ACTION METHOD  ACTUATES OBTAINING A CAN AND PREPPING FOR GRABBING A TOTE
	{
		lowerCarriage();//LOWERS CARRIAGE
		Timer.delay(.75);//WAITS .75 SECONDS
		getCan();//GETS CAN
		Timer.delay(1);//WAITS 1 SECOND
		raiseCarriage();//RAISES THE CARRIAGE
	}//END METHOD FOR PICKING UP A CAN
	
	public void releaseStack()//ACTION METHOD  RELEASES THE STACK IN ITS POSSESION FOR EITHER SCORING OR RELEASING AT END OF MATCH
	{
		lowerCarriage();//LOWERS CARRIAGE
		Timer.delay(1);//WAITS 1 SECOND
		releaseTote();//RELEASES TOTE
		releaseCan();//RELEASES CAN
	}//END RELEASING STACK
	
}//END CLASS ELEVATOR CARRIAGE  WHICH CONTAINS ALL METHODS FOR USING THE ELEVATOR CARRIAGE
